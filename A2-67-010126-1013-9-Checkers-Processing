int[][] board = new int[8][8];
int tileSize = 80;
int currentPlayer = 1;
boolean pieceSelected = false;
int selectedRow = -1, selectedCol = -1;
int playerWhite = 1;
int playerRed = -1;
boolean gameEnded = false;

void setup() {
  size(640, 640);
  initializeBoard();
}
void draw() {
  background(255);
  drawBoard();
  drawPieces();
  displayCurrentPlayer();
  drawValidMoves();

  if (gameEnded) {
    displayGameOver();
  }
}
void drawValidMoves() {
    if (pieceSelected) {
        boolean captureAvailable = anyCaptureAvailable();

        if (captureAvailable) {
            for (int toRow = 0; toRow < 8; toRow++) {
                for (int toCol = 0; toCol < 8; toCol++) {
                    if (isCaptureMove(selectedRow, selectedCol, toRow, toCol)) {
                        fill(0, 255, 0);
                        rect(toCol * tileSize, toRow * tileSize, tileSize, tileSize);
                    }
                }
            }
        } else {
            for (int toRow = 0; toRow < 8; toRow++) {
                for (int toCol = 0; toCol < 8; toCol++) {
                    if (isValidMove(selectedRow, selectedCol, toRow, toCol)) {
                        fill(0, 255, 0);
                        rect(toCol * tileSize, toRow * tileSize, tileSize, tileSize);
                    }
                }
            }
        }
    }
}
void initializeBoard() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (row < 2 && (row + col) % 2 == 1) {
        board[row][col] = playerWhite;
      } else if (row > 5 && (row + col) % 2 == 1) {
        board[row][col] = playerRed;
      }
    }
  }
}
void drawBoard() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if ((row + col) % 2 == 0) {
        fill(255);
      } else {
        if (pieceSelected && isValidMove(selectedRow, selectedCol, row, col)) {
          fill(0);
        } else if (pieceSelected && isCaptureMove(selectedRow, selectedCol, row, col)) {
          fill(0, 255, 0);
        } else if (canCapture(row, col) && board[row][col] == currentPlayer) {
          fill(0, 0, 255);
        } else {
          fill(0);
        }
      }
      rect(col * tileSize, row * tileSize, tileSize, tileSize);
    }
  }
}
void drawPieces() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (board[row][col] == playerWhite || board[row][col] == 2) {
        fill(255);
        ellipse(col * tileSize + tileSize / 2, row * tileSize + tileSize / 2, tileSize - 10, tileSize - 10);
        if (board[row][col] == 2) {
          fill(255, 215, 0);
          textSize(30);
          textAlign(CENTER, CENTER);
          text("King", col * tileSize + tileSize / 2, row * tileSize + tileSize / 2);
        }
      } else if (board[row][col] == playerRed || board[row][col] == -2) {
        fill(255, 0, 0);
        ellipse(col * tileSize + tileSize / 2, row * tileSize + tileSize / 2, tileSize - 10, tileSize - 10);
        if (board[row][col] == -2) {
          fill(255, 215, 0);
          textSize(30);
          textAlign(CENTER, CENTER);
          text("King", col * tileSize + tileSize / 2, row * tileSize + tileSize / 2);
        }
      }
    }
  }
}
void displayCurrentPlayer() {
  fill(0, 255, 0);
  textSize(32);
  String playerText = (currentPlayer == playerWhite) ? "Turn: White" : "Turn: Red";
  text(playerText, 20, height - 20);
}
void displayGameOver() {
    fill(255, 0, 0);
    textSize(32);
    text("Game Over", width / 2 - 80, height / 2);
    fill(0);
    textSize(20);
    text("Click to Restart", width / 2 - 80, height / 2 + 40);
}
