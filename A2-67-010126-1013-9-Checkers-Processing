int[][] board = new int[8][8];
int tileSize = 80;
int currentPlayer = 1;
boolean pieceSelected = false;
int selectedRow = -1, selectedCol = -1;
int playerWhite = 1;
int playerRed = -1;
boolean gameEnded = false;

void setup() {
  size(640, 640);
  initializeBoard();
}
void draw() {
  background(255);
  drawBoard();
  drawPieces();
  displayCurrentPlayer();
  drawValidMoves();

  if (gameEnded) {
    displayGameOver();
  }
}
void drawValidMoves() {
    if (pieceSelected) {
        boolean captureAvailable = anyCaptureAvailable();

        if (captureAvailable) {
            for (int toRow = 0; toRow < 8; toRow++) {
                for (int toCol = 0; toCol < 8; toCol++) {
                    if (isCaptureMove(selectedRow, selectedCol, toRow, toCol)) {
                        fill(0, 255, 0);
                        rect(toCol * tileSize, toRow * tileSize, tileSize, tileSize);
                    }
                }
            }
        } else {
            for (int toRow = 0; toRow < 8; toRow++) {
                for (int toCol = 0; toCol < 8; toCol++) {
                    if (isValidMove(selectedRow, selectedCol, toRow, toCol)) {
                        fill(0, 255, 0);
                        rect(toCol * tileSize, toRow * tileSize, tileSize, tileSize);
                    }
                }
            }
        }
    }
}
void initializeBoard() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (row < 2 && (row + col) % 2 == 1) {
        board[row][col] = playerWhite;
      } else if (row > 5 && (row + col) % 2 == 1) {
        board[row][col] = playerRed;
      }
    }
  }
}
void drawBoard() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if ((row + col) % 2 == 0) {
        fill(255);
      } else {
        if (pieceSelected && isValidMove(selectedRow, selectedCol, row, col)) {
          fill(0);
        } else if (pieceSelected && isCaptureMove(selectedRow, selectedCol, row, col)) {
          fill(0, 255, 0);
        } else if (canCapture(row, col) && board[row][col] == currentPlayer) {
          fill(0, 0, 255);
        } else {
          fill(0);
        }
      }
      rect(col * tileSize, row * tileSize, tileSize, tileSize);
    }
  }
}
void drawPieces() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (board[row][col] == playerWhite || board[row][col] == 2) {
        fill(255);
        ellipse(col * tileSize + tileSize / 2, row * tileSize + tileSize / 2, tileSize - 10, tileSize - 10);
        if (board[row][col] == 2) {
          fill(255, 215, 0);
          textSize(30);
          textAlign(CENTER, CENTER);
          text("King", col * tileSize + tileSize / 2, row * tileSize + tileSize / 2);
        }
      } else if (board[row][col] == playerRed || board[row][col] == -2) {
        fill(255, 0, 0);
        ellipse(col * tileSize + tileSize / 2, row * tileSize + tileSize / 2, tileSize - 10, tileSize - 10);
        if (board[row][col] == -2) {
          fill(255, 215, 0);
          textSize(30);
          textAlign(CENTER, CENTER);
          text("King", col * tileSize + tileSize / 2, row * tileSize + tileSize / 2);
        }
      }
    }
  }
}
void displayCurrentPlayer() {
  fill(0, 255, 0);
  textSize(32);
  String playerText = (currentPlayer == playerWhite) ? "Turn: White" : "Turn: Red";
  text(playerText, 20, height - 20);
}
void displayGameOver() {
    fill(255, 0, 0);
    textSize(32);
    text("Game Over", width / 2 - 80, height / 2);
    fill(0);
    textSize(20);
    text("Click to Restart", width / 2 - 80, height / 2 + 40);
}
void checkGameOver() {
  int whiteCount = 0, redCount = 0;

  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (board[row][col] == playerWhite) {
        whiteCount++;
      } else if (board[row][col] == playerRed) {
        redCount++;
      }
    }
  }
  if (whiteCount == 0 || redCount == 0) {
    gameEnded = true;
  }
}
boolean canCapture(int row, int col) {
  for (int dRow = -2; dRow <= 2; dRow += 4) {
    for (int dCol = -2; dCol <= 2; dCol += 4) {
      int toRow = row + dRow;
      int toCol = col + dCol;
      if (toRow >= 0 && toRow < 8 && toCol >= 0 && toCol < 8) {
        if (isCaptureMove(row, col, toRow, toCol)) {
          return true;
        }
      }
    }
  }
  
  if (abs(board[row][col]) == 2) {
    for (int dRow = -2; dRow <= 2; dRow += 4) {
      for (int dCol = -2; dCol <= 2; dCol += 4) {
        for (int dist = 2; dist < 8; dist++) {
          int toRow = row + dist * (dRow / 2);
          int toCol = col + dist * (dCol / 2);
          if (toRow >= 0 && toRow < 8 && toCol >= 0 && toCol < 8) {
            if (isCaptureMove(row, col, toRow, toCol)) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}
boolean anyCaptureAvailable() {
  for (int row = 0; row < 8; row++) {
    for (int col = 0; col < 8; col++) {
      if (board[row][col] == currentPlayer || abs(board[row][col]) == 2) {
        if (canCapture(row, col)) {
          return true;
        }
      }
    }
  }
  return false;
}
void mousePressed() {
  if (gameEnded) return;

  int clickedRow = mouseY / tileSize;
  int clickedCol = mouseX / tileSize;

  boolean captureAvailable = anyCaptureAvailable();

  if (pieceSelected) {
    if (isCaptureMove(selectedRow, selectedCol, clickedRow, clickedCol)) {
      capturePiece(selectedRow, selectedCol, clickedRow, clickedCol);
      checkGameOver();
      currentPlayer *= -1;
    } else if (canCapture(selectedRow, selectedCol)) {
      pieceSelected = false;
      return;
    } else if (!captureAvailable && isValidMove(selectedRow, selectedCol, clickedRow, clickedCol)) {
      movePiece(selectedRow, selectedCol, clickedRow, clickedCol);
      checkGameOver();
      currentPlayer *= -1;
    }
    pieceSelected = false;
  } else {
    if (captureAvailable) {
      if ((board[clickedRow][clickedCol] == currentPlayer || abs(board[clickedRow][clickedCol]) == 2) && canCapture(clickedRow, clickedCol)) {
        pieceSelected = true;
        selectedRow = clickedRow;
        selectedCol = clickedCol;
      }
    } else if (board[clickedRow][clickedCol] == currentPlayer || (abs(board[clickedRow][clickedCol]) == 2 && board[clickedRow][clickedCol] * currentPlayer > 0)) {
      pieceSelected = true;
      selectedRow = clickedRow;
      selectedCol = clickedCol;
    }
  }
}
boolean isValidMove(int fromRow, int fromCol, int toRow, int toCol) {
  if (board[toRow][toCol] != 0) {
    return false;
  }

  if (board[fromRow][fromCol] != currentPlayer && abs(board[fromRow][fromCol]) != 2) {
    return false;
  }

  if (abs(board[fromRow][fromCol]) == 1) { 
    if (board[fromRow][fromCol] == playerWhite && toRow > fromRow && abs(fromRow - toRow) == 1 && abs(fromCol - toCol) == 1) {
      return true;
    }
    if (board[fromRow][fromCol] == playerRed && toRow < fromRow && abs(fromRow - toRow) == 1 && abs(fromCol - toCol) == 1) {
      return true;
    }
  }

  if (abs(board[fromRow][fromCol]) == 2) {
    if (abs(fromRow - toRow) == abs(fromCol - toCol)) {
      return true;
    }
  }

  return false;
}
